{{- /* if remote_logging has been enabled by the user */ -}}
{{- $remote_logging_enabled := false }}
{{- $remote_logging_envvars := list "AIRFLOW__CORE__REMOTE_LOGGING" "AIRFLOW__LOGGING__REMOTE_LOGGING" }}
{{- range $key, $val := .Values.airflow.config }}
  {{- if has $key $remote_logging_envvars }}
  {{- $remote_logging_enabled = true }}
  {{- end }}
{{- end }}
{{- range $env := .Values.airflow.extraEnv }}
  {{- if has $env.name $remote_logging_envvars }}
  {{- $remote_logging_enabled = true }}
  {{- end }}
{{- end }}

{{- /* if an extra volume has been mounted for worker logs */ -}}
{{- $extra_volumes_worker_logs := false }}
{{- if include "airflow.extraVolumeMounts.has_log_path" . }}
{{- $extra_volumes_worker_logs = true }}
{{- end }}
{{- if .Values.workers.enabled }}
  {{- if include "airflow._has_logs_path" (dict "Values" .Values "volume_mounts" .Values.workers.extraVolumeMounts) }}
  {{- $extra_volumes_worker_logs = true }}
  {{- end }}
{{- end }}
{{- if and (include "airflow.executor.kubernetes_like" .) (not .Values.airflow.kubernetesPodTemplate.stringOverride) }}
  {{- if include "airflow._has_logs_path" (dict "Values" .Values "volume_mounts" .Values.airflow.kubernetesPodTemplate.extraVolumeMounts) }}
  {{- $extra_volumes_worker_logs = true }}
  {{- end }}
{{- end }}

{{- /* if we show the fernet_key warning */ -}}
{{- $fernet_key_warning := true }}
{{- $fernet_key_envvars := list "AIRFLOW__CORE__FERNET_KEY" "AIRFLOW__CORE__FERNET_KEY_CMD" "AIRFLOW__CORE__FERNET_KEY_SECRET" }}
{{- if not (eq .Values.airflow.fernetKey "7T512UXSSmBOkpWimFHIVb8jK6lfmSAvx4mO6Arehnc=")  }}
{{- $fernet_key_warning = false }}
{{- end }}
{{- range $key, $val := .Values.airflow.config }}
  {{- if has $key $fernet_key_envvars }}
  {{- $fernet_key_warning = false }}
  {{- end }}
{{- end }}
{{- range $env := .Values.airflow.extraEnv }}
  {{- if has $env.name $fernet_key_envvars }}
  {{- $fernet_key_warning = false }}
  {{- end }}
{{- end }}

{{- /* if we show the webserver secret_key warning */ -}}
{{- $web_secret_warning := true }}
{{- $web_secret_envvars := list }}
{{- if semverCompare "<3.0.0" (include "airflow.version" .) }}
  {{- $web_secret_envvars = list "AIRFLOW__WEBSERVER__SECRET_KEY" "AIRFLOW__WEBSERVER__SECRET_KEY_CMD" "AIRFLOW__WEBSERVER__SECRET_KEY_SECRET" }}
{{- else }}
  {{- $web_secret_envvars = list "AIRFLOW__API__SECRET_KEY" "AIRFLOW__API__SECRET_KEY_CMD" "AIRFLOW__API__SECRET_KEY_SECRET" }}
{{- end }}
{{- if and (ne .Values.airflow.webserverSecretKey "THIS IS UNSAFE!") (ne .Values.airflow.apiSecretKey "")  }}
{{- $web_secret_warning = false }}
{{- end }}
{{- range $key, $val := .Values.airflow.config }}
  {{- if has $key $web_secret_envvars }}
  {{- $web_secret_warning = false }}
  {{- end }}
{{- end }}
{{- range $env := .Values.airflow.extraEnv }}
  {{- if has $env.name $web_secret_envvars }}
  {{- $web_secret_warning = false }}
  {{- end }}
{{- end }}

{{- /* if we show the external database password warning */ -}}
{{- $external_database_password_warning := false }}
{{- if and (not .Values.postgresql.enabled) (not .Values.externalDatabase.passwordSecret) }}
  {{- /* don't show a warning if the password is empty */ -}}
  {{- if .Values.externalDatabase.password }}
  {{- $external_database_password_warning = true }}
  {{- end }}
{{- end }}

{{- /* if we show the external redis password warning */ -}}
{{- $external_redis_password_warning := false }}
{{- if and (not .Values.redis.enabled) (not .Values.externalRedis.passwordSecret) }}
  {{- /* don't show a warning if the password is empty */ -}}
  {{- if .Values.externalRedis.password }}
  {{- $external_redis_password_warning = true }}
  {{- end }}
{{- end }}

{{- /* if we show the extraPipPackages warning */ -}}
{{- $extra_pip_warning := false }}
{{- if .Values.airflow.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.airflow.kubernetesPodTemplate.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.scheduler.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.web.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.workers.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.flower.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- end }}

{{- /* if we show the embedded postgres warning */ -}}
{{- $embedded_postgres_warning := false }}
{{- if .Values.postgresql.enabled }}
{{- $embedded_postgres_warning = true }}
{{- end }}

{{- /* if we show the git-sync known_hosts warning */ -}}
{{- $known_host_warning := false }}
{{- if and (.Values.dags.gitSync.enabled) (.Values.dags.gitSync.sshSecret) (not .Values.dags.gitSync.sshKnownHosts) }}
{{- $known_host_warning = true }}
{{- end }}

{{- /* if we show the scheduler livenessProbe warning */ -}}
{{- $scheduler_livenessProbe_warning := false }}
{{- if not .Values.scheduler.livenessProbe.enabled }}
{{- $scheduler_livenessProbe_warning = true }}
{{- end }}

{{- /* if we show the scheduler livenessProbe taskCreationCheck warning */ -}}
{{- $scheduler_livenessProbe_taskCreationCheck_warning := false }}
{{- if and (.Values.scheduler.livenessProbe.enabled) (not .Values.scheduler.livenessProbe.taskCreationCheck.enabled) }}
{{- $scheduler_livenessProbe_taskCreationCheck_warning = true }}
{{- end }}

{{- /* Determine web service details based on Airflow version */ -}}
{{- $webServiceName := "" }}
{{- $webServicePort := 0 }}
{{- $webServiceType := "" }}
{{- $webComponentName := "" }}
{{- $ingressWebHost := "" }}
{{- $ingressWebPath := "" }}
{{- $ingressWebTlsEnabled := false }}
{{- if semverCompare ">=3.0.0" (include "airflow.version" .) }}
  {{- $webServiceName = printf "%s-api-server" (include "airflow.fullname" .) }}
  {{- $webServicePort = .Values.apiServer.service.externalPort }}
  {{- $webServiceType = .Values.apiServer.service.type }}
  {{- $webComponentName = "API Server" }}
  {{- $ingressWebHost = .Values.ingress.apiServer.host }}
  {{- $ingressWebPath = .Values.ingress.apiServer.path }}
  {{- $ingressWebTlsEnabled = .Values.ingress.apiServer.tls.enabled }}
{{- else }}
  {{- $webServiceName = printf "%s-web" (include "airflow.fullname" .) }}
  {{- $webServicePort = .Values.web.service.externalPort }}
  {{- $webServiceType = .Values.web.service.type }}
  {{- $webComponentName = "Webserver" }}
  {{- $ingressWebHost = .Values.ingress.web.host }}
  {{- $ingressWebPath = .Values.ingress.web.path }}
  {{- $ingressWebTlsEnabled = .Values.ingress.web.tls.enabled }}
{{- end }}

{{- /* if we show the JWT secret warning (Airflow 3.0+ only) */ -}}
{{- $jwt_secret_warning := false }}
{{- if semverCompare ">=3.0.0" (include "airflow.version" .) }}
  {{- if and (not .Values.airflow.jwtSecret) (not .Values.airflow.jwtSecretName) }}
  {{- $jwt_secret_warning = true }}
  {{- end }}
{{- end }}

{{- /* if we show the auth manager warning (Airflow 3.1.0+ only) */ -}}
{{- $auth_manager_warning := false }}
{{- if semverCompare ">=3.1.0" (include "airflow.version" .) }}
  {{- if not (or .Values.airflow.config.AIRFLOW__CORE__AUTH_MANAGER .Values.airflow.config.AIRFLOW__API__AUTH_BACKENDS) }}
  {{- $auth_manager_warning = true }}
  {{- end }}
{{- end }}

========================================================================
Thanks for deploying Apache Airflow with the User-Community Helm Chart!

====================
        TIPS
====================
{{- range $user := .Values.airflow.users }}
{{- if and (eq $user.username "admin") (eq $user.password "admin") }}
Default Airflow Webserver login:
  * Username:  admin
  * Password:  admin
{{- end }}
{{ end }}

{{- if not (or .Values.logs.persistence.enabled $remote_logging_enabled $extra_volumes_worker_logs) }}
You have NOT set up persistence for worker task logs, do this by:
  1. Using a PersistentVolumeClaim with `logs.persistence.*`
  2. Using remote logging with `AIRFLOW__LOGGING__REMOTE_LOGGING`
{{ end }}

{{- if and (not .Values.ingress.enabled) (eq $webServiceType "ClusterIP") }}
It looks like you have NOT exposed the Airflow {{ $webComponentName }}, do this by:
  1. Using a Kubernetes Ingress with `ingress.*`
{{- if semverCompare ">=3.0.0" (include "airflow.version" .) }}
  2. Using a Kubernetes LoadBalancer/NodePort type Service with `apiServer.service.type`
{{- else }}
  2. Using a Kubernetes LoadBalancer/NodePort type Service with `web.service.type`
{{- end }}
{{ end }}

{{- if .Values.ingress.enabled }}
Your Kubernetes Ingress endpoint URLs:
  * Airflow {{ $webComponentName }}:  http{{ if $ingressWebTlsEnabled }}s{{ end }}://{{ $ingressWebHost }}{{ $ingressWebPath }}/
{{- if .Values.flower.enabled }}
  * Flower Dashboard:   http{{ if .Values.ingress.flower.tls.enabled }}s{{ end }}://{{ .Values.ingress.flower.host }}{{ .Values.ingress.flower.path }}/
{{- end }}
{{ end }}

{{- if eq $webServiceType "LoadBalancer" }}
You deployed a "LoadBalancer" type Service for the Airflow {{ $webComponentName }}:
  * External IP:    kubectl get svc/{{ $webServiceName }} --namespace {{ .Release.Namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
  * External Port:  {{ $webServicePort }}
  * NOTE:           it may take a few minutes for the External IP to be provisioned by your cloud provider
{{ end }}

{{- if eq $webServiceType "NodePort" }}
You deployed a "NodePort" type Service for the Airflow {{ $webComponentName }}:
  * Node IP:    kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}"
  * Node Port:  kubectl get svc/{{ $webServiceName }} --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}"
  * NOTE:       any Node's external IP will work
{{ end }}

{{- if true }}
Use these commands to port-forward the Services to your localhost:
  * Airflow {{ $webComponentName }}:  kubectl port-forward svc/{{ $webServiceName }} 8080:{{ $webServicePort }} --namespace {{ .Release.Namespace }}
{{- if .Values.flower.enabled }}
  * Flower Dashboard:   kubectl port-forward svc/{{ include "airflow.fullname" . }}-flower 5555:5555 --namespace {{ .Release.Namespace }}
{{- end }}
{{- if and (semverCompare ">=3.0.0" (include "airflow.version" .)) (.Values.dagProcessor.enabled) }}
  * DAG Processor:      kubectl get deploy/{{ include "airflow.fullname" . }}-dag-processor --namespace {{ .Release.Namespace }}
{{- else if and (semverCompare ">=2.3.0" (include "airflow.version" .)) (.Values.dagProcessor.enabled) }}
  * DAG Processor:      kubectl get deploy/{{ include "airflow.fullname" . }}-dag-processor --namespace {{ .Release.Namespace }} (standalone mode)
{{- end }}
{{ end }}

{{- if or ($fernet_key_warning) ($web_secret_warning) ($jwt_secret_warning) ($auth_manager_warning) ($extra_pip_warning) ($embedded_postgres_warning) ($known_host_warning) }}
====================
      WARNINGS
====================
{{- if $fernet_key_warning }}
[CRITICAL] default fernet encryption key value!
  * HELP: set a custom value with `airflow.fernetKey` or `AIRFLOW__CORE__FERNET_KEY`
{{ end }}

{{- if $web_secret_warning }}
{{- if semverCompare ">=3.0.0" (include "airflow.version" .) }}
  [CRITICAL] default API secret_key value!
  * HELP: set a custom value with `airflow.apiSecretKey` or `AIRFLOW__API__SECRET_KEY`
{{- else }}
  [CRITICAL] default webserver secret_key value!
  * HELP: set a custom value with `airflow.webserverSecretKey` or `AIRFLOW__WEBSERVER__SECRET_KEY`
{{- end }}
{{ end }}

{{- if $jwt_secret_warning }}
[HIGH] JWT secret is auto-generated and will change on every helm upgrade!
  * HELP: set `airflow.jwtSecretName` to reference a persistent Kubernetes Secret
  * DOCS: charts/airflow/docs/faq/security/set-jwt-secret.md
  * NOTE: auto-generated secrets cause component restarts and task failures during upgrades
{{ end }}

{{- if $auth_manager_warning }}
[HIGH] Airflow 3.1.0+ changed default authentication to Simple Auth!
  * HELP: for production, explicitly configure FAB Auth Manager:
          airflow.config.AIRFLOW__CORE__AUTH_MANAGER: "airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager"
  * DOCS: charts/airflow/docs/guides/airflow-3-migration.md#authentication
{{ end }}

{{- if $external_database_password_warning }}
[CRITICAL] external database password is set using plain-text value!
  * HELP: create a Kubernetes secret with your database password and configure `externalDatabase.passwordSecret`
{{ end }}

{{- if $external_redis_password_warning }}
[CRITICAL] external redis password is set using plain-text value!
  * HELP: create a Kubernetes secret with your redis password and configure `externalRedis.passwordSecret`
{{ end }}

{{- if $extra_pip_warning }}
[HIGH] using `extraPipPackages` can cause unexpected runtime errors if external PyPi packages change between Pod restarts
  * HELP: create a Docker image with your pip packages installed and use it with `airflow.image.*`
{{ end }}

{{- if $embedded_postgres_warning }}
[HIGH] using the embedded postgres database is NOT suitable for production!
  * HELP: use an external postgres/mysql database with `externalDatabase.*`
{{ end }}

{{- if $known_host_warning }}
[HIGH] git-sync ssh known_hosts verification is disabled!
  * HELP: set `dags.gitSync.sshKnownHosts` with the ssh fingerprint of your git host
{{ end }}

{{- if $scheduler_livenessProbe_warning }}
[MEDIUM] the scheduler liveness probe is disabled, the scheduler may not be restarted if it becomes unhealthy!
  * HELP: enable the probe with `scheduler.livenessProbe.enabled`
{{ end }}

{{- if $scheduler_livenessProbe_taskCreationCheck_warning }}
[MEDIUM] the scheduler "task creation check" is disabled, the scheduler may not be restarted if it deadlocks!
  * HELP: configure the check with `scheduler.livenessProbe.taskCreationCheck.*`
{{ end }}

{{- end }}
========================================================================